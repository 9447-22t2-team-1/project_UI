AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "COMP9447-T2-2022-Team1"
Description: ""
Resources:
    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "InitEC2Role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy
              - "arn:aws:iam::aws:policy/IAMFullAccess"
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

    IAMInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole3
            Roles: 
              - !Ref IAMRole3

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName:  "QueryReportRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "read_dynamodb"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 14400
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
            Description: "Allows EC2 instances to call AWS services on your behalf."

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    SUBNET_ID: "subnet-0553f798786d4d34b"
                    SECURITY: "sg-0eb62be6076c898a0"
                    AMI: "ami-05c257d0f3d83bb93"
                    INSTANCE_TYPE: "t2.micro"
                    KEY_NAME: "Team1_Keypair"
                    REGION: !Ref AWS::Region
            FunctionName: "InitEC2"
            Handler: "index.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                ZipFile: !Sub | 
                    import os
                    import boto3
                    import datetime
                    import json
                    AMI = os.environ['AMI']
                    INSTANCE_TYPE = os.environ['INSTANCE_TYPE']
                    KEY_NAME = os.environ['KEY_NAME']
                    SUBNET_ID = os.environ['SUBNET_ID']
                    REGION = os.environ['REGION']
                    SECURITY = os.environ['SECURITY']
                    

                    ec2 = boto3.client('ec2', region_name=REGION)
                    db = boto3.client('dynamodb')

                    def lambda_handler(event, context):


                        # need title 
                        # need userID
                        # need pipeline

                        userID = event['userID']
                        title = event['title']
                        pipeline = event['pipeline']
                        

                        current_date = datetime.datetime.now()
                        id = int(current_date.strftime('%Y%m%d%H%M%S'))
                        item = {'id':{'N':str(id)},'Pipeline':{'S': str(pipeline)},'running':{'BOOL':bool(True)},'title':{'S':str(title)},'userID':{'N':str(userID)},'dateCreated':{'S':str(current_date)}}
                        db.put_item(TableName='Pipeline', Item=item)

                                                    
                        user_data = '''#!/bin/bash
                        echo ''' + str(id) + '''> /home/ubuntu/backend/pipelineID.txt
                        echo ''' + str(pipeline) + '''> /home/ubuntu/backend/pipeline.txt
                        cd /home/ubuntu/backend
                        python3 backendProcessor.py
                        pipelineID=$(<pipelineID.txt)
                        pipelineResult=$(</home/ubuntu/backend/Output/PipelineOutputEncoded.txt)
                        aws dynamodb update-item --table-name Pipeline --key '{"id":{"N":"'"$pipelineID"'"}}' --update-expression "SET pipelineResult = :newMessages, running = :s" --expression-attribute-values '{":newMessages" : {"S": "'"$pipelineResult"'"},":s":{"BOOL":false}}' --region "ap-southeast-2"
                        shutdown -P now'''

                        # user_data = '''#!/bin/bash
                        # echo ''' + str(id) + '''> /home/ubuntu/backend/pipelineID.txt
                        # cd /home/ubuntu/backend
                        # pipelineID=$(<pipelineID.txt)
                        # ./snykWrapper.sh https://github.com/snyk/cli
                        # cat SnykOutput/SnykOutput_001.json | base64 -w 0 > /home/ubuntu/backend/result.txt
                        # pipelineResult=$(<result.txt)
                        # aws dynamodb update-item --table-name Pipeline --key '{"id":{"N":"'"$pipelineID"'"}}' --update-expression "SET pipelineResult = :newMessages, running = :s" --expression-attribute-values '{":newMessages" : {"S": "'"$pipelineResult"'"},":s":{"BOOL":false}}' --region "ap-southeast-2"
                        # shutdown -h now'''
                        
                        instance = ec2.run_instances(
                            ImageId=AMI,
                            InstanceType=INSTANCE_TYPE,
                            KeyName=KEY_NAME,
                            SubnetId=SUBNET_ID,
                            SecurityGroupIds = [SECURITY],
                            MaxCount=1,
                            MinCount=1,
                            InstanceInitiatedShutdownBehavior='terminate',
                            IamInstanceProfile= {
                                    'Arn': 'arn:aws:iam::${AWS::AccountId}:instance-profile/read_dynamodb',
                            },
                            UserData = user_data
                        )

                        instance_id = instance['Instances'][0]['InstanceId']
                        # print(instance_id)
                        responseObject = {}
                        responseObject['statusCode'] = 200
                        responseObject['headers'] = {}
                        responseObject['headers']['Content-Type'] = 'application/json'
                        responseObject['headers']['Access-Control-Allow-Origin'] = "*";
                        responseObject['headers']["Access-Control-Allow-Credentials"] = True;
                        responseObject['headers']["Access-Control-Allow-Headers"] =  "Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,locale";
                        responseObject['headers']["Access-Control-Allow-Methods"] =  "POST, OPTIONS";
                        
                        responseObject['body'] = id
                        
                        return responseObject
            MemorySize: 128
            Role: !GetAtt IAMRole.Arn
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "QueryReportFunction"
            Handler: "index.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                ZipFile: |
                    import json
                    import boto3
                    from boto3.dynamodb.conditions import Key, Attr
                    from decimal import *

                    dynamodb = boto3.resource('dynamodb')
                    scanTable = dynamodb.Table('Pipeline')


                    def lambda_handler(event, context):
                        # TODO implement
                        userID = event['queryStringParameters']['userID']
                        #userID = "1"
                        listReport = scanTable.scan(FilterExpression=Attr("userID").eq(Decimal(str(userID))))['Items']
                        
                        # print(json.dumps(response))
                        responseObject = {}
                        responseObject['statusCode'] = 200
                        responseObject['headers'] = {}
                        responseObject['headers']['Content-Type'] = 'application/json'
                        responseObject['headers']['Access-Control-Allow-Origin'] = "*";
                        responseObject['headers']["Access-Control-Allow-Credentials"] = True;
                        responseObject['headers']["Access-Control-Allow-Headers"] =  "Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,locale";
                        responseObject['headers']["Access-Control-Allow-Methods"] =  "POST, OPTIONS";
                        
                        
                        reports = {}
                        listReports = []
                        for report in listReport:
                            if report["running"]:
                                item = {
                                    "id":str(report["id"]),
                                    "title":report["title"],
                                    "status":str(report["running"]),
                                    "date":str(report["dateCreated"]),
                                    "Pipeline": report["Pipeline"],
                                    "ResultService": ""
                                }
                            else:
                                item = {
                                    "id":str(report["id"]),
                                    "title":report["title"],
                                    "status":str(report["running"]),
                                    "date":str(report["dateCreated"]),
                                    "Pipeline": report["Pipeline"],
                                    "ResultService": report["pipelineResult"]
                                }
                            listReports.append(item)
                            
                        reports["listReport"] = listReports
                        responseObject['body'] = json.dumps(reports)
                        
                        
                        return responseObject

            MemorySize: 128
            Role: !GetAtt "IAMRole2.Arn"
            Runtime: "python3.9"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/"

    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/"

    LambdaPermission3:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/"

    DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "id"
                AttributeType: "N"
            TableName: "Pipeline"
            KeySchema: 
              - 
                AttributeName: "id"
                KeyType: "HASH"
            ProvisionedThroughput: 
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "API"
            Description: "Use this front end to bind UI with backend"
            ApiKeySourceType: "HEADER"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"


    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "Empty"
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: "2zq9wfzq31"
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS_PROXY"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction2}/invocations"

    ApiGatewayMethod2:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "Empty"
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: "2zq9wfzq31"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayMethod3:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "POST"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "Empty"
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: "2zq9wfzq31"
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations"

    EC2KeyPair:
        Type: "AWS::EC2::KeyPair"
        Properties:
            KeyName: "Team1_Keypair"
            KeyType: "rsa"

    IAMManagedPolicy:
            Type: "AWS::IAM::ManagedPolicy"
            Properties:
                ManagedPolicyName: "EC2Permission"
                Path: "/service-role/"
                PolicyDocument: |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "VisualEditor0",
                                "Effect": "Allow",
                                "Action": [
                                    "dynamodb:*",
                                    "ec2:*"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Sid": "VisualEditor1",
                                "Effect": "Allow",
                                "Action": [
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Resource": "arn:aws:logs:*:*:*"
                            },
                            {
                                "Sid": "VisualEditor2",
                                "Effect": "Allow",
                                "Action": "logs:CreateLogGroup",
                                "Resource": "arn:aws:logs:*:*:*"
                            },
                            {
                                "Effect":"Allow",
                                "Action":"iam:PassRole",
                                "Resource":"arn:aws:iam::123456789012:role/*"
                            }
                        ]
                    }

