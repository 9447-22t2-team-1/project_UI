import 'dart:convert';

class Report {
  final String? id, title, date, status, result;

  Report({this.id, this.title, this.date, this.status, this.result});

  Report.fromJson(Map<String, dynamic> json, this.id)
      : title = json["title"],
        date = json["date"],
        status = json["status"],
        result = utf8.decode(base64.decode(base64
            .normalize(json["ResultService"]))); //json["result"]; //"AAA";
}
//Sample json 1
// ewogICJvayI6IGZhbHNlLAogICJlcnJvciI6ICJDb3VsZG4ndCBmaW5kIHRoZSByZXF1ZXN0ZWQgcGFja2FnZSBvciB2ZXJzaW9uIiwKICAicGF0aCI6ICJodHRwczovL2dpdGh1Yi5jb20vOTQ0Ny0yMnQyLXRlYW0tMS9JQUMtU2FtcGxlYyIKfQo=
//Sample json2
// ewogICJvayI6IGZhbHNlLAogICJlcnJvciI6ICJDb3VsZG4ndCBmaW5kIHRoZSByZXF1ZXN0ZWQgcGFja2FnZSBvciB2ZXJzaW9uIiwKICAicGF0aCI6ICJodHRwczovL2dpdGh1Yi5jb20vOTQ0Ny0yMnQyLXRlYW0tMS9JQUMtU2FtcGxlYyIKfQo=

List<Report> demoAlertFiles = [
  Report(
    title: "S3 Project 1",
    date: "27-06-2022",
    status: "Running",
    result:
        "ewogICJvayI6IGZhbHNlLAogICJlcnJvciI6ICJDb3VsZG4ndCBmaW5kIHRoZSByZXF1ZXN0ZWQgcGFja2FnZSBvciB2ZXJzaW9uIiwKICAicGF0aCI6ICJodHRwczovL2dpdGh1Yi5jb20vOTQ0Ny0yMnQyLXRlYW0tMS9JQUMtU2FtcGxlYyIKfQo",
  ), //"{title: report, body: Snyk report blah blah}"),
  Report(
    title: "S3 Project 2",
    date: "27-06-2022",
    status: "Running",
    result:
        "",
  ),
  Report(
    title: "ECS service Project 1",
    date: "25-02-2021",
    status: "Done",
    result: "{title: report, body: testing 3}",
  ),
  Report(
    title: "S3 service Project 1",
    date: "23-02-2022",
    status: "Done",
    result: "{title: report, body: testing 4}",
  ),
  Report(
    title: "ECS service Project 2",
    date: "20-02-2022",
    status: "Done",
    result: "{title: report, body: testing 5}",
  ),
  Report(
    title: "Lambda scan",
    date: "20-02-2022",
    status: "Done",
    result: "{title: report, body: testing 6}",
  ),
  Report(
    title: "ESC scan",
    date: "19-02-2022",
    status: "Running",
    result: "{title: report, body: testing 7}",
  ),
];
