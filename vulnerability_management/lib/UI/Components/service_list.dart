// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/UI/Components/constants.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';

class ServiceList extends StatelessWidget {
  // const ServiceList({Key? key}) : super(key: key);
  final ServiceController serviceController = Get.put(ServiceController());

  @override
  Widget build(BuildContext context) {
    List<Service> entries = List<Service>.generate(
        serviceController.listService.length,
        (index) => serviceController.listService[index]);
    return Container(
      padding: const EdgeInsets.all(defaultPadding),
      decoration: const BoxDecoration(
        color: bgColor,
        borderRadius: BorderRadius.all(Radius.circular(10)),
      ),

      //ListView
      child: ListView.separated(
        padding: const EdgeInsets.all(15),
        itemCount: entries.length,
        itemBuilder: (BuildContext context, int index) {
          return Draggable<Service>(
            data: entries[index],
            feedback: Container(
                height: 50,
                width: 300,
                decoration: const BoxDecoration(
                  color: testColor2,
                  borderRadius: BorderRadius.all(Radius.circular(10)),
                ),
                child: Center(
                  child: Card(
                    color: testColor2,
                    child: Text("${entries[index].name}"),
                  ),
                )),
            child: Container(
                height: 75,
                decoration: const BoxDecoration(
                  borderRadius: BorderRadius.all(Radius.circular(10)),
                ),
                child: Card(
                  color: testColor2,
                  child: ListTile(
                    title: Text('${entries[index].name}'),
                  ),
                )),
          );
        },
        separatorBuilder: (BuildContext context, int index) => const Divider(),
      ),
    );
  }
}
