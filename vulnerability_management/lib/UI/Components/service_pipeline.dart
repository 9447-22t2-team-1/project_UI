// ignore_for_file: prefer_const_constructors, must_be_immutable, use_key_in_widget_constructors

import 'dart:math';

import 'package:enhance_stepper/enhance_stepper.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/Controllers/report_controller.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';
import 'package:vulnerability_management/UI/Components/add_folder_widget.dart';
import 'package:vulnerability_management/UI/Components/constants.dart';
import 'package:vulnerability_management/UI/Components/verify_widget.dart';
import 'package:vulnerability_management/UI/Components/wait_for_post_widget.dart';

class ServicePipeline extends StatelessWidget {
  final ServiceController serviceController = Get.put(ServiceController());
  final ReportController reportController = Get.put(ReportController());
  @override
  Widget build(BuildContext context) {
    return Obx(() {
      var list = serviceController.listPipeline.isEmpty;
      var currentstage = serviceController.currentStage();
      return Column(
        mainAxisSize: MainAxisSize.min,
        children: <Widget>[
          const SizedBox(height: 30),
          Expanded(
            child: SizedBox(
              width: MediaQuery.of(context).size.width / 2,
              child: DragTarget<Service>(
                builder: (
                  BuildContext context,
                  List<dynamic> accepted,
                  List<dynamic> rejected,
                ) {
                  return list
                      ? Text("")
                      : EnhanceStepper(
                          key: Key(Random.secure().nextDouble().toString()),
                          type: StepperType.vertical,
                          physics: ClampingScrollPhysics(),
                          currentStep: currentstage,
                          steps: serviceController.listPipeline
                              .map(
                                (element) => EnhanceStep(
                                  title: Text('${element.name}'),
                                  content: SizedBox(
                                    height:
                                        MediaQuery.of(context).size.height / 2,
                                    child: ReorderableList(
                                      stage: serviceController.currentStage(),
                                    ),
                                  ),
                                ),
                              )
                              .toList(),
                          onStepTapped: (index) {
                            serviceController.currentStage(index);
                          },
                          controlsBuilder:
                              (BuildContext context, ControlsDetails details) {
                            return Row(
                              children: [
                                SizedBox(
                                  height: 30,
                                ),
                                ElevatedButton(
                                  onPressed: () async {
                                    showDialog<String>(
                                      context: context,
                                      builder: (BuildContext context) =>
                                          serviceController.currentStage() != 2
                                              ? VerifyWidget(
                                                  pass: true,
                                                )
                                              : WaitWidget(),
                                    );
                                    if (serviceController.currentStage() == 2) {
                                      await serviceController.postPipeline();
                                      reportController.fetchReport();
                                      Get.toNamed('/second');
                                    }
                                  },
                                  child: Text("Verify and Continue"),
                                ),
                                SizedBox(
                                  width: 10,
                                ),
                                TextButton(
                                  onPressed: () =>
                                      serviceController.deleteAll(),
                                  child: Text("Delete All"),
                                ),
                              ],
                            );
                          },
                        );
                },
                onAccept: (Service data) {
                  serviceController.addService(data.id);
                },
              ),
            ),
          )
        ],
      );
    });
  }
}

class ReorderableList extends StatelessWidget {
  final int? stage;
  ReorderableList({Key? key, this.stage}) : super(key: key);

  final ServiceController serviceController = Get.put(ServiceController());
  List<Service> _items = <Service>[];

  @override
  Widget build(BuildContext context) {
    return Obx(() {
      _items = List<Service>.generate(
          serviceController
              .allStageService[serviceController.currentStage()].length,
          (index) => serviceController
              .allStageService[serviceController.currentStage()][index]);
      return ReorderableListView(
        buildDefaultDragHandles: false,
        padding: EdgeInsets.all(40),
        children: <Widget>[
          for (int index = 0; index < _items.length; index += 1)
            ReorderableDragStartListener(
              key: Key('$index'),
              index: index,
              child: Padding(
                padding: EdgeInsets.all(5),
                child: Card(
                  elevation: double.infinity,
                  color: testColor2,
                  child: Column(
                    children: [
                      ListTile(
                        onTap: () => showDialog<String>(
                          context: context,
                          builder: (BuildContext context) => AddRepoWidget(
                            index: index,
                          ),
                        ),
                        iconColor: Colors.white,
                        onLongPress: () => print("test"),
                        leading: Text('$index'),
                        title: Text('${_items[index].name}'),
                        trailing: InkWell(
                          onTap: () {
                            serviceController.deleteItem(index);
                          },
                          child: Icon(
                            Icons.delete_outline,
                            size: 30,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
        onReorder: (int oldIndex, int newIndex) {
          serviceController.swapService(oldIndex, newIndex, stage);
        },
      );
    });
  }
}
