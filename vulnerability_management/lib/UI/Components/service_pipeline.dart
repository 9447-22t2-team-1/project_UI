// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';

class ServicePipeline extends StatefulWidget {
  const ServicePipeline({Key? key}) : super(key: key);

  @override
  State<ServicePipeline> createState() => _ServicePipelineState();
}

class _ServicePipelineState extends State<ServicePipeline> {
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        const SizedBox(height: 30),
        // TextButton(
        //   style: TextButton.styleFrom(
        //     textStyle: const TextStyle(fontSize: 20),
        //   ),
        //   onPressed: () {},
        //   child: const Text('Enabled'),
        // ),
        Expanded(
          child: ReorderableList(),
        )
      ],
    );
  }
}

class ServiceOptions {
  static const String configure = 'Configure';
  static const String delete = 'Delete';

  static const List<String> choices = <String>[
    configure,
    delete,
  ];

  void action(ServiceController controller, String choice) {
    final splitted = choice.split(';');
    // print(splitted[0]);

    if (splitted[1] == configure) {
      //configure page:
      print('configuring');
    } else if (splitted[1] == delete) {
      print('deleting');
      controller.removeService(int.parse(splitted[0]));
    }
  }
}

class ReorderableList extends StatelessWidget {
  ReorderableList({Key? key}) : super(key: key);

  final ServiceController serviceController = Get.put(ServiceController());
  List<Service> _items = List<Service>.generate(
      defaultServices.length, (int index) => defaultServices[index]);

  final ServiceOptions _options = ServiceOptions();

  @override
  Widget build(BuildContext context) {
    final ColorScheme colorScheme = Theme.of(context).colorScheme;
    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);
    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);
    final Color stageColor = colorScheme.primary.withOpacity(0.5);

    return Obx(
      () {
        _items = List<Service>.generate(serviceController.listPipeline.length,
            (index) => serviceController.listPipeline[index]);
        return ReorderableListView(
          padding: const EdgeInsets.symmetric(horizontal: 40),
          children: <Widget>[
            for (int index = 0; index < _items.length; index += 1)
              ListTile(
                key: Key('$index'),
                leading: PopupMenuButton(
                  icon: Icon(Icons.settings),
                  onSelected: (String selected) =>
                      _options.action(serviceController, selected),
                  itemBuilder: (BuildContext context) {
                    return ServiceOptions.choices.map((String choice) {
                      return PopupMenuItem<String>(
                        value: '$index;$choice',
                        child: Text(choice),
                      );
                    }).toList();
                  },
                ),
                tileColor: serviceController.isStage(index)
                    ? stageColor
                    : index.isOdd
                        ? oddItemColor
                        : evenItemColor,
                title: Text('$index: ${_items[index].name}'),
              ),
          ],
          onReorder: (int oldIndex, int newIndex) {
            serviceController.swapService(oldIndex, newIndex);
          },
        );
      },
    );
  }
}
