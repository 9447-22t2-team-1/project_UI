// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';
import 'package:vulnerability_management/UI/Components/constants.dart';

class ServicePipeline extends StatelessWidget {
  final ServiceController serviceController = Get.put(ServiceController());
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        const SizedBox(height: 30),
        Expanded(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              StageService(
                serviceController: serviceController,
                index: 0,
              ),
              StageService(
                serviceController: serviceController,
                index: 1,
              ),
              StageService(
                serviceController: serviceController,
                index: 2,
              ),
            ],
          ),
        )
      ],
    );
  }
}

class StageService extends StatelessWidget {
  final int? index;
  const StageService({
    Key? key,
    required this.serviceController,
    this.index,
  }) : super(key: key);

  final ServiceController serviceController;

  @override
  Widget build(BuildContext context) {
    return DragTarget<Service>(
      builder: (
        BuildContext context,
        List<dynamic> accepted,
        List<dynamic> rejected,
      ) {
        return Container(
          width: MediaQuery.of(context).size.width / 4.5,
          height: MediaQuery.of(context).size.height / 1.3,
          decoration: const BoxDecoration(
            color: secondaryColor,
            borderRadius: BorderRadius.all(Radius.circular(10)),
          ),
          child: Center(
            child: ReorderableList(stage: index),
          ),
        );
      },
      onAccept: (Service data) {
        serviceController.addService(index!, data.id);
      },
    );
  }
}

class ReorderableList extends StatelessWidget {
  final int? stage;
  ReorderableList({Key? key, this.stage}) : super(key: key);

  final ServiceController serviceController = Get.put(ServiceController());
  List<Service> _items = <Service>[];

  @override
  Widget build(BuildContext context) {
    return Obx(
      () {
        var title = "";
        switch (stage) {
          case 0:
            title = "Build";
            _items = List<Service>.generate(
                serviceController.buildService.length,
                (index) => serviceController.buildService[index]);
            break;
          case 1:
            title = "Test";
            _items = List<Service>.generate(
                serviceController.testService.length,
                (index) => serviceController.testService[index]);
            break;
          case 2:
            title = "Deploy";
            _items = List<Service>.generate(
                serviceController.deployService.length,
                (index) => serviceController.deployService[index]);
            break;
        }
        return ReorderableListView(
          buildDefaultDragHandles: false,
          padding: const EdgeInsets.symmetric(horizontal: 40),
          children: <Widget>[
            for (int index = 0; index < _items.length; index += 1)
              ReorderableDragStartListener(
                key: Key('$index'),
                index: index,
                child: Card(
                  // decoration: const BoxDecoration(
                  //   color: Colors.white10,
                  //   borderRadius: BorderRadius.all(Radius.circular(10)),
                  // ),
                  elevation: double.infinity,
                  color: testColor2,
                  child: ListTile(
                    iconColor: Colors.white,
                    onLongPress: () => print("test"),
                    title: Text('$index: ${_items[index].name}'),
                    trailing: InkWell(
                      onTap: () {
                        serviceController.deleteItem(stage, index);
                      },
                      child: Icon(
                        Icons.delete_outline,
                        size: 30,
                      ),
                    ),
                  ),
                ),
              ),
          ],
          onReorder: (int oldIndex, int newIndex) {
            serviceController.swapService(oldIndex, newIndex, stage);
          },
        );
      },
    );
  }
}
