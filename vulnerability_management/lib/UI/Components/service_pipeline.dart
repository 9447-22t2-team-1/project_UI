// ignore_for_file: prefer_const_constructors, must_be_immutable, use_key_in_widget_constructors

import 'dart:math';

import 'package:enhance_stepper/enhance_stepper.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';
import 'package:vulnerability_management/UI/Components/constants.dart';

class ServicePipeline extends StatelessWidget {
  final ServiceController serviceController = Get.put(ServiceController());
  @override
  Widget build(BuildContext context) {
    var list = serviceController.listPipeline;
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        const SizedBox(height: 30),
        Expanded(
          child: SizedBox(
            width: MediaQuery.of(context).size.width / 2,
            child: DragTarget<Service>(
              builder: (
                BuildContext context,
                List<dynamic> accepted,
                List<dynamic> rejected,
              ) {
                return Obx(() {
                  return list.isEmpty
                      ? Text("")
                      : EnhanceStepper(
                          key: Key(Random.secure().nextDouble().toString()),
                          type: StepperType.vertical,
                          physics: ClampingScrollPhysics(),
                          currentStep: serviceController.currentStage(),
                          steps: list
                              .map(
                                (element) => EnhanceStep(
                                  title: Text('${element.name}'),
                                  content: SizedBox(
                                    height:
                                        MediaQuery.of(context).size.height / 2,
                                    child: ReorderableList(
                                      stage: serviceController.currentStage(),
                                    ),
                                  ),
                                ),
                              )
                              .toList(),
                          onStepTapped: (index) {
                            serviceController.currentStage(index);
                          },
                        );
                });
              },
              onAccept: (Service data) {
                serviceController.addService(data.id);
              },
            ),
          ),
        )
      ],
    );
  }
}

class ReorderableList extends StatelessWidget {
  final int? stage;
  ReorderableList({Key? key, this.stage}) : super(key: key);

  final ServiceController serviceController = Get.put(ServiceController());
  List<Service> _items = <Service>[];

  @override
  Widget build(BuildContext context) {
    return Obx(
      () {
        switch (stage) {
          case 0:
            _items = List<Service>.generate(
                serviceController.buildService.length,
                (index) => serviceController.buildService[index]);
            break;
          case 1:
            _items = List<Service>.generate(
                serviceController.testService.length,
                (index) => serviceController.testService[index]);
            break;
          case 2:
            _items = List<Service>.generate(
                serviceController.deployService.length,
                (index) => serviceController.deployService[index]);
            break;
        }
        return ReorderableListView(
          buildDefaultDragHandles: false,
          padding: EdgeInsets.all(40),
          children: <Widget>[
            for (int index = 0; index < _items.length; index += 1)
              ReorderableDragStartListener(
                key: Key('$index'),
                index: index,
                child: Padding(
                  padding: EdgeInsets.all(5),
                  child: Card(
                    elevation: double.infinity,
                    color: testColor2,
                    child: Column(
                      children: [
                        ListTile(
                          iconColor: Colors.white,
                          onLongPress: () => print("test"),
                          leading: Text('$index'),
                          title: Text('${_items[index].name}'),
                          trailing: InkWell(
                            onTap: () {
                              serviceController.deleteItem(stage, index);
                            },
                            child: Icon(
                              Icons.delete_outline,
                              size: 30,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
          ],
          onReorder: (int oldIndex, int newIndex) {
            serviceController.swapService(oldIndex, newIndex, stage);
          },
        );
      },
    );
  }
}
