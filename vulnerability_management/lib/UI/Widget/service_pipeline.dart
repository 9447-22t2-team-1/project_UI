// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';

class ServicePipeline extends StatefulWidget {
  const ServicePipeline({Key? key}) : super(key: key);

  @override
  State<ServicePipeline> createState() => _ServicePipelineState();
}

class _ServicePipelineState extends State<ServicePipeline> {
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        const SizedBox(height: 30),
        TextButton(
          style: TextButton.styleFrom(
            textStyle: const TextStyle(fontSize: 20),
          ),
          onPressed: () {},
          child: const Text('Enabled'),
        ),
        Expanded(
          child: ReorderableList(),
        )
      ],
    );
  }
}

class ReorderableList extends StatelessWidget {
  ReorderableList({Key? key}) : super(key: key);

  final ServiceController serviceController = Get.put(ServiceController());
  List<Service> _items = List<Service>.generate(
      defaultServices.length, (int index) => defaultServices[index]);
  @override
  Widget build(BuildContext context) {
    final ColorScheme colorScheme = Theme.of(context).colorScheme;
    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);
    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);
    return Obx(
      () {
        _items = List<Service>.generate(serviceController.listService.length,
            (index) => serviceController.listService[index]);
        return ReorderableListView(
          padding: const EdgeInsets.symmetric(horizontal: 40),
          children: <Widget>[
            for (int index = 0; index < _items.length; index += 1)
              ListTile(
                key: Key('$index'),
                tileColor: index.isOdd ? oddItemColor : evenItemColor,
                title: Text('${_items[index].name}'),
              ),
          ],
          onReorder: (int oldIndex, int newIndex) {
            serviceController.swapService(oldIndex, newIndex);
          },
        );
      },
    );
  }
}
