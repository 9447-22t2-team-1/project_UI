import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:vulnerability_management/Controllers/service_controller.dart';
import 'package:vulnerability_management/Models/service_model.dart';

class ServicePipeline extends StatefulWidget {
  const ServicePipeline({Key? key}) : super(key: key);

  @override
  State<ServicePipeline> createState() => _ServicePipelineState();
}

class _ServicePipelineState extends State<ServicePipeline> {
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        const SizedBox(height: 30),
        TextButton(
          style: TextButton.styleFrom(
            textStyle: const TextStyle(fontSize: 20),
          ),
          onPressed: () {},
          child: const Text('Enabled'),
        ),
        const Expanded(
          child: ReorderableList(),
        )
      ],
    );
  }
}

//Use stful to create new stateful widget
class ReorderableList extends StatefulWidget {
  const ReorderableList({Key? key}) : super(key: key);

  @override
  State<ReorderableList> createState() => _ReorderableListState();
}

class _ReorderableListState extends State<ReorderableList> {
  // int _count = 0;
  final ServiceController serviceController = Get.put(ServiceController());

  //Create a list of 5 default items that have values [1,2,3,4,5]

  List<Service> _items = List<Service>.generate(
      defaultServices.length, (int index) => defaultServices[index]);

  @override
  Widget build(BuildContext context) {
    serviceController.initService();
    print(serviceController.listService.length);
    _items = List<Service>.generate(serviceController.listService.length,
        (index) => serviceController.listService[index]);
    final ColorScheme colorScheme = Theme.of(context).colorScheme;
    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);
    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);

    return ReorderableListView(
      padding: const EdgeInsets.symmetric(horizontal: 40),
      children: <Widget>[
        for (int index = 0; index < _items.length; index += 1)
          ListTile(
            key: Key('$index'),
            tileColor: index.isOdd ? oddItemColor : evenItemColor,
            title: Text('${_items[index].name}'),
          ),
      ],
      onReorder: (int oldIndex, int newIndex) {
        setState(() {
          if (oldIndex < newIndex) {
            newIndex -= 1;
          }
          final Service item = _items.removeAt(oldIndex);
          _items.insert(newIndex, item);
          print(newIndex);
        });
      },
    );
  }
}
