import 'dart:convert';

import 'package:get/get.dart';
import 'package:vulnerability_management/API/API.dart';

import '../Models/service_model.dart';

class ServiceController extends GetxController {
  //observe these vars

  //list of added services on left
  var listService = <Service>[].obs;
  var currentStage = 0.obs;

  var allStageService = <List<Service>>[].obs;

  //list of added services on right
  var listPipeline = <Service>[].obs;

  void initService() {
    listService.value = defaultServices;
    listPipeline.value = defaultPipeline;
    allStageService.add(<Service>[].obs);
    allStageService.add(<Service>[].obs);
    allStageService.add(<Service>[].obs);
  }

  void addService(String? serviceIndex) {
    var listPineLine = <Service>[];
    switch (serviceIndex) {
      case "0":
        {
          listPineLine.add(Service(id: "0", name: "Snyk", stage: false));
        }
        break;
      case "1":
        {
          listPineLine
              .add(Service(id: "1", name: "AWS Code Build", stage: false));
        }
        break;
      case "2":
        {
          listPineLine.add(
              Service(id: "2", name: "OWASP Dependency Check", stage: false));
        }
        break;
      case "3":
        {
          listPineLine.add(Service(id: "3", name: "cfn-nag", stage: false));
        }
        break;
      case "4":
        {
          listPineLine.add(Service(id: "4", name: "ISM", stage: false));
        }
        break;
    }
    allStageService[currentStage()].addAll(listPineLine);
  }

  void deleteItem(int index) {
    allStageService[currentStage()].removeAt(index);
  }

  void deleteAll() {
    allStageService[currentStage()].clear();
  }

  void verifyAndNext() {
    switch (currentStage()) {
      case 0:
        break;
      case 1:
        break;
      case 2:
        break;
    }
  }

  void swapService(int oldIndex, int newIndex, int? stage) {
    if (oldIndex < newIndex) {
      newIndex -= 1;
    }
    var item = allStageService[currentStage()].removeAt(oldIndex);
    allStageService[currentStage()].insert(newIndex, item);
  }

  Map<String, dynamic> toJSON() {
    Map<String, dynamic> json = {};
    int index = 0;
    for (var services in allStageService) {
      var listService = [];
      for (var service in services) {
        listService.add(service.toJson());
      }
      if (index == 0) {
        json['Build'] = listService;
      } else if (index == 1) {
        json['Test'] = listService;
      } else {
        json['Deploy'] = listService;
      }
      index++;
    }
    return json;
  }

  Future<dynamic> postPipeline() async {
    var jsons = json.encode(toJSON());
    String encoded = base64.encode(utf8.encode(jsons));
    return await API.postServiceList("test1", encoded);
  }
}
