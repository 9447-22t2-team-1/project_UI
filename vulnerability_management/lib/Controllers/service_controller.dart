import 'package:get/get.dart';

import '../Models/service_model.dart';

class ServiceController extends GetxController {
  //observe these vars

  //list of added services on left
  var listService = <Service>[].obs;
  var buildService = <Service>[].obs;
  var testService = <Service>[].obs;
  var deployService = <Service>[].obs;
  var currentStage = 0.obs;

  //list of added services on right
  var listPipeline = <Service>[].obs;

  void initService() {
    listService.value = defaultServices;
    listPipeline.value = defaultPipeline;
  }

  void addService(String? serviceIndex) {
    var listPineLine = <Service>[];
    switch (serviceIndex) {
      case "0":
        {
          listPineLine.add(Service(id: "0", name: "Snyk", stage: false));
        }
        break;
      case "1":
        {
          listPineLine
              .add(Service(id: "1", name: "AWS Code Deploy", stage: false));
        }
        break;
      case "2":
        {
          listPineLine.add(
              Service(id: "2", name: "OWASP Dependency Check", stage: false));
        }
        break;
      case "3":
        {
          listPineLine.add(Service(id: "3", name: "cfn-nag", stage: false));
        }
        break;
      case "4":
        {
          listPineLine.add(Service(id: "4", name: "ISM", stage: false));
        }
        break;
    }
    buildService.addAllIf(currentStage() == 0, listPineLine);
    testService.addAllIf(currentStage() == 1, listPineLine);
    deployService.addAllIf(currentStage() == 2, listPineLine);
  }

  void deleteItem(int? stage, int index) {
    if (stage == 0) buildService.removeAt(index);
    if (stage == 1) testService.removeAt(index);
    if (stage == 2) deployService.removeAt(index);
  }

  void swapService(int oldIndex, int newIndex, int? stage) {
    if (oldIndex < newIndex) {
      newIndex -= 1;
    }
    switch (stage) {
      case 0:
        var item = buildService.removeAt(oldIndex);
        buildService.insert(newIndex, item);
        break;
      case 1:
        var item = testService.removeAt(oldIndex);
        testService.insert(newIndex, item);
        break;
      case 2:
        var item = deployService.removeAt(oldIndex);
        deployService.insert(newIndex, item);
        break;
    }
  }
}
